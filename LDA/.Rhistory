knitr::opts_chunk$set(echo = TRUE)
library(GGally)
x11(width = 20, height = 15)
#options(repr.plot.width = 24, repr.plot.height = 8)
ggpairs(data, columns = 1:10,
ggplot2::aes(colour=g),
title="Correlation matrix. Phoneme data")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
library(MASS)
library(dplyr)
library(ggplot2)
library(kableExtra)
all_data <- read.csv("phoneme.csv", header = TRUE)
dim(all_data)
data <- all_data[, c(2:11, 258)]
dim(data)
str(data)
library(purrr)
data %>% modify_if(is.character, as.factor) -> data
str(data)
table(Phonemes=data$g) %>%
kbl(caption = "Frequency table. Phoneme data set") %>%
kable_classic(full_width = F, html_font = "Cambria")
data %>%
sample_n(., 10, replace=FALSE) %>%
arrange(g) %>%
kbl(caption = "Phoneme data set (sample of 20)") %>%
kable_classic(full_width = F, html_font = "Cambria")
data %>%
summary(.) %>%
kbl(caption = "Basic statistics. Phoneme data set") %>%
kable_classic(full_width = F, html_font = "Cambria")
colSums((is.na((data))))
#install.packages("chemometrics")
library(chemometrics)
md <- Moutlier(data[, 1:10], quantile = 0.99, plot=FALSE)
md$cutoff
outliers <- which(md$md > md$cutoff)
head(outliers, 10) # show first 10 outliers according to Malhanobis distance
#install.packages('DDoutlier')
library("DDoutlier")
lof <- LOF(data[, 1:10], k = 5) # outlier score with a neighborhood of 5 points
head(lof)
summary(lof) # some statistics
hist(lof)
plot(sort(lof), type = "l",  main = "LOF (K = 5)",
xlab = "Points sorted by LOF", ylab = "LOF")
lof_with_names = lof
names(lof_with_names) <- 1:nrow(data[, 1:10])
sort(lof_with_names, decreasing = TRUE)[1:10]
outliers <- which(lof > 1.4)
length(outliers)
data = data[-outliers, ]
dim(data)
library(gridExtra)
library(ggplot2)
g1 <- ggplot(data, aes(x=x.1)) +
geom_density(fill="#69b3a2", color="#e9ecef", alpha=0.8)
g2 <- ggplot(data, aes(x=x.2)) +
geom_density(fill="#69b3a2", color="#e9ecef", alpha=0.8)
g3 <- ggplot(data, aes(x=x.3)) +
geom_density(fill="#69b3a2", color="#e9ecef", alpha=0.8)
g4 <- ggplot(data, aes(x=x.4)) +
geom_density(fill="#69b3a2", color="#e9ecef", alpha=0.8)
g5 <- ggplot(data, aes(x=x.5)) +
geom_density(fill="#69b3a2", color="#e9ecef", alpha=0.8)
g6 <- ggplot(data, aes(x=x.6)) +
geom_density(fill="#69b3a2", color="#e9ecef", alpha=0.8)
g7 <- ggplot(data, aes(x=x.7)) +
geom_density(fill="#69b3a2", color="#e9ecef", alpha=0.8)
g8 <- ggplot(data, aes(x=x.8)) +
geom_density(fill="#69b3a2", color="#e9ecef", alpha=0.8)
g9 <- ggplot(data, aes(x=x.9)) +
geom_density(fill="#69b3a2", color="#e9ecef", alpha=0.8)
g10 <- ggplot(data, aes(x=x.10)) +
geom_density(fill="#69b3a2", color="#e9ecef", alpha=0.8)
grid.arrange(g1,g2, nrow=1); grid.arrange(g3,g4,nrow=1);grid.arrange(g5,g6,nrow=1); grid.arrange(g7,g8,nrow=1); grid.arrange(g9,g10,nrow=1)
library(gridExtra)
library(ggpubr)
library(ggplot2)
g1 <- ggqqplot(data[,1], col=2, ggtheme = theme_gray(), title = "x.1 Q-Q plot")
g2 <- ggqqplot(data[,2], col=2, ggtheme = theme_gray(), title = "x.2 Q-Q plot")
g3 <- ggqqplot(data[,3], col=2, ggtheme = theme_gray(), title = "x.3 Q-Q plot")
g4 <- ggqqplot(data[,4], col=2, ggtheme = theme_gray(), title = "x.4 Q-Q plot")
g5 <- ggqqplot(data[,5], col=2, ggtheme = theme_gray(), title = "x.5 Q-Q plot")
g6 <- ggqqplot(data[,6], col=2, ggtheme = theme_gray(), title = "x.6 Q-Q plot")
g7 <- ggqqplot(data[,7], col=2, ggtheme = theme_gray(), title = "x.7 Q-Q plot")
g8 <- ggqqplot(data[,8], col=2, ggtheme = theme_gray(), title = "x.8 Q-Q plot")
g9 <- ggqqplot(data[,9], col=2, ggtheme = theme_gray(), title = "x.9 Q-Q plot")
g10 <- ggqqplot(data[,10], col=2, ggtheme = theme_gray(), title = "x.10 Q-Q plot")
grid.arrange(g1,g2, nrow=1); grid.arrange(g3,g4,nrow=1);grid.arrange(g5,g6,nrow=1); grid.arrange(g7,g8,nrow=1); grid.arrange(g9,g10,nrow=1)
for(i in 1:10){
print(paste(" Shapiro-Wilk test for predictor x.",i,":"))
print(shapiro.test(data[,i]))
}
#install.packages("forecast")
library(forecast)
lambda = c()
for(i in 1:10){
lambda[i] = BoxCox.lambda(data[, i], method = "loglik")
}
lambda # optimal lambdas
#install.packages("car")
library(car)
#library(carData)
data[, 1:10] = bcPower(data[, 1:10], lambda=lambda)
for(i in 1:10){
print(paste(" Shapiro-Wilk test for predictor x.",i,":"))
print(shapiro.test((data[,i])))
}
library(gridExtra)
g1 <- ggplot(data,aes(x=g, y=x.1, fill=g)) +
geom_boxplot() +
theme(legend.position="right")
g2 <- ggplot(data,aes(x=g, y=x.2, fill=g)) +
geom_boxplot() +
theme(legend.position="none")
g3 <- ggplot(data,aes(x=g, y=x.3, fill=g)) +
geom_boxplot() +
theme(legend.position="none")
g4 <- ggplot(data,aes(x=g, y=x.4, fill=g)) +
geom_boxplot() +
theme(legend.position="none")
g5 <- ggplot(data,aes(x=g, y=x.5, fill=g)) +
geom_boxplot() +
theme(legend.position="none")
g6 <- ggplot(data,aes(x=g, y=x.6, fill=g)) +
geom_boxplot() +
theme(legend.position="none")
g7 <- ggplot(data,aes(x=g, y=x.7, fill=g)) +
geom_boxplot() +
theme(legend.position="none")
g8 <- ggplot(data,aes(x=g, y=x.8, fill=g)) +
geom_boxplot() +
theme(legend.position="none")
g9 <- ggplot(data,aes(x=g, y=x.9, fill=g)) +
geom_boxplot() +
theme(legend.position="none")
g10 <- ggplot(data,aes(x=g, y=x.10, fill=g)) +
geom_boxplot() +
theme(legend.position="none")
grid.arrange(g1,g2,nrow=1); grid.arrange(g3,g4,nrow=1);grid.arrange(g5,g6,nrow=1); grid.arrange(g7,g8,nrow=1); grid.arrange(g9,g10,nrow=1)
g1 <- ggplot(data, aes(x = x.1, fill = g)) +
geom_density(alpha = 0.7) + theme_bw() +
theme(legend.position="right")
g2 <- ggplot(data, aes(x = x.2, fill = g)) +
geom_density(alpha = 0.7) + theme_bw() +
theme(legend.position="none")
g3 <- ggplot(data, aes(x = x.3, fill = g)) +
geom_density(alpha = 0.7) + theme_bw() +
theme(legend.position="none")
g4 <- ggplot(data, aes(x = x.4, fill = g)) +
geom_density(alpha = 0.7) + theme_bw() +
theme(legend.position="none")
g5 <- ggplot(data, aes(x = x.5, fill = g)) +
geom_density(alpha = 0.7) + theme_bw() +
theme(legend.position="none")
g6 <- ggplot(data, aes(x = x.6, fill = g)) +
geom_density(alpha = 0.7) + theme_bw() +
theme(legend.position="none")
g7 <- ggplot(data, aes(x = x.7, fill = g)) +
geom_density(alpha = 0.7) + theme_bw() +
theme(legend.position="none")
g8 <- ggplot(data, aes(x = x.8, fill = g)) +
geom_density(alpha = 0.7) + theme_bw() +
theme(legend.position="none")
g9 <- ggplot(data, aes(x = x.9, fill = g)) +
geom_density(alpha = 0.7) + theme_bw() +
theme(legend.position="none")
g10 <- ggplot(data, aes(x = x.10, fill = g)) +
geom_density(alpha = 0.7) + theme_bw() +
theme(legend.position="none")
#grid.arrange(g1,g2,g3,g4,g5,g6,g7,g8,g9,g10,nrow=5)
grid.arrange(g1,g2,nrow=1); grid.arrange(g3,g4,nrow=1);grid.arrange(g5,g6,nrow=1); grid.arrange(g7,g8,nrow=1); grid.arrange(g9,g10,nrow=1)
library(GGally)
x11(width = 20, height = 15)
#options(repr.plot.width = 24, repr.plot.height = 8)
ggpairs(data, columns = 1:10,
ggplot2::aes(colour=g),
title="Correlation matrix. Phoneme data")
Sys.sleep(10)
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
library(MASS)
library(dplyr)
library(ggplot2)
library(kableExtra)
all_data <- read.csv("phoneme.csv", header = TRUE)
dim(all_data)
data <- all_data[, c(2:11, 258)]
dim(data)
str(data)
library(purrr)
data %>% modify_if(is.character, as.factor) -> data
str(data)
table(Phonemes=data$g) %>%
kbl(caption = "Frequency table. Phoneme data set") %>%
kable_classic(full_width = F, html_font = "Cambria")
data %>%
sample_n(., 10, replace=FALSE) %>%
arrange(g) %>%
kbl(caption = "Phoneme data set (sample of 20)") %>%
kable_classic(full_width = F, html_font = "Cambria")
data %>%
summary(.) %>%
kbl(caption = "Basic statistics. Phoneme data set") %>%
kable_classic(full_width = F, html_font = "Cambria")
colSums((is.na((data))))
#install.packages("chemometrics")
library(chemometrics)
md <- Moutlier(data[, 1:10], quantile = 0.99, plot=FALSE)
md$cutoff
outliers <- which(md$md > md$cutoff)
head(outliers, 10) # show first 10 outliers according to Malhanobis distance
#install.packages('DDoutlier')
library("DDoutlier")
lof <- LOF(data[, 1:10], k = 5) # outlier score with a neighborhood of 5 points
head(lof)
summary(lof) # some statistics
hist(lof)
plot(sort(lof), type = "l",  main = "LOF (K = 5)",
xlab = "Points sorted by LOF", ylab = "LOF")
lof_with_names = lof
names(lof_with_names) <- 1:nrow(data[, 1:10])
sort(lof_with_names, decreasing = TRUE)[1:10]
outliers <- which(lof > 1.4)
length(outliers)
data = data[-outliers, ]
dim(data)
library(gridExtra)
library(ggplot2)
g1 <- ggplot(data, aes(x=x.1)) +
geom_density(fill="#69b3a2", color="#e9ecef", alpha=0.8)
g2 <- ggplot(data, aes(x=x.2)) +
geom_density(fill="#69b3a2", color="#e9ecef", alpha=0.8)
g3 <- ggplot(data, aes(x=x.3)) +
geom_density(fill="#69b3a2", color="#e9ecef", alpha=0.8)
g4 <- ggplot(data, aes(x=x.4)) +
geom_density(fill="#69b3a2", color="#e9ecef", alpha=0.8)
g5 <- ggplot(data, aes(x=x.5)) +
geom_density(fill="#69b3a2", color="#e9ecef", alpha=0.8)
g6 <- ggplot(data, aes(x=x.6)) +
geom_density(fill="#69b3a2", color="#e9ecef", alpha=0.8)
g7 <- ggplot(data, aes(x=x.7)) +
geom_density(fill="#69b3a2", color="#e9ecef", alpha=0.8)
g8 <- ggplot(data, aes(x=x.8)) +
geom_density(fill="#69b3a2", color="#e9ecef", alpha=0.8)
g9 <- ggplot(data, aes(x=x.9)) +
geom_density(fill="#69b3a2", color="#e9ecef", alpha=0.8)
g10 <- ggplot(data, aes(x=x.10)) +
geom_density(fill="#69b3a2", color="#e9ecef", alpha=0.8)
grid.arrange(g1,g2, nrow=1); grid.arrange(g3,g4,nrow=1);grid.arrange(g5,g6,nrow=1); grid.arrange(g7,g8,nrow=1); grid.arrange(g9,g10,nrow=1)
library(gridExtra)
library(ggpubr)
library(ggplot2)
g1 <- ggqqplot(data[,1], col=2, ggtheme = theme_gray(), title = "x.1 Q-Q plot")
g2 <- ggqqplot(data[,2], col=2, ggtheme = theme_gray(), title = "x.2 Q-Q plot")
g3 <- ggqqplot(data[,3], col=2, ggtheme = theme_gray(), title = "x.3 Q-Q plot")
g4 <- ggqqplot(data[,4], col=2, ggtheme = theme_gray(), title = "x.4 Q-Q plot")
g5 <- ggqqplot(data[,5], col=2, ggtheme = theme_gray(), title = "x.5 Q-Q plot")
g6 <- ggqqplot(data[,6], col=2, ggtheme = theme_gray(), title = "x.6 Q-Q plot")
g7 <- ggqqplot(data[,7], col=2, ggtheme = theme_gray(), title = "x.7 Q-Q plot")
g8 <- ggqqplot(data[,8], col=2, ggtheme = theme_gray(), title = "x.8 Q-Q plot")
g9 <- ggqqplot(data[,9], col=2, ggtheme = theme_gray(), title = "x.9 Q-Q plot")
g10 <- ggqqplot(data[,10], col=2, ggtheme = theme_gray(), title = "x.10 Q-Q plot")
grid.arrange(g1,g2, nrow=1); grid.arrange(g3,g4,nrow=1);grid.arrange(g5,g6,nrow=1); grid.arrange(g7,g8,nrow=1); grid.arrange(g9,g10,nrow=1)
for(i in 1:10){
print(paste(" Shapiro-Wilk test for predictor x.",i,":"))
print(shapiro.test(data[,i]))
}
#install.packages("forecast")
library(forecast)
lambda = c()
for(i in 1:10){
lambda[i] = BoxCox.lambda(data[, i], method = "loglik")
}
lambda # optimal lambdas
#install.packages("car")
library(car)
#library(carData)
data[, 1:10] = bcPower(data[, 1:10], lambda=lambda)
for(i in 1:10){
print(paste(" Shapiro-Wilk test for predictor x.",i,":"))
print(shapiro.test((data[,i])))
}
library(gridExtra)
g1 <- ggplot(data,aes(x=g, y=x.1, fill=g)) +
geom_boxplot() +
theme(legend.position="right")
g2 <- ggplot(data,aes(x=g, y=x.2, fill=g)) +
geom_boxplot() +
theme(legend.position="none")
g3 <- ggplot(data,aes(x=g, y=x.3, fill=g)) +
geom_boxplot() +
theme(legend.position="none")
g4 <- ggplot(data,aes(x=g, y=x.4, fill=g)) +
geom_boxplot() +
theme(legend.position="none")
g5 <- ggplot(data,aes(x=g, y=x.5, fill=g)) +
geom_boxplot() +
theme(legend.position="none")
g6 <- ggplot(data,aes(x=g, y=x.6, fill=g)) +
geom_boxplot() +
theme(legend.position="none")
g7 <- ggplot(data,aes(x=g, y=x.7, fill=g)) +
geom_boxplot() +
theme(legend.position="none")
g8 <- ggplot(data,aes(x=g, y=x.8, fill=g)) +
geom_boxplot() +
theme(legend.position="none")
g9 <- ggplot(data,aes(x=g, y=x.9, fill=g)) +
geom_boxplot() +
theme(legend.position="none")
g10 <- ggplot(data,aes(x=g, y=x.10, fill=g)) +
geom_boxplot() +
theme(legend.position="none")
grid.arrange(g1,g2,nrow=1); grid.arrange(g3,g4,nrow=1);grid.arrange(g5,g6,nrow=1); grid.arrange(g7,g8,nrow=1); grid.arrange(g9,g10,nrow=1)
g1 <- ggplot(data, aes(x = x.1, fill = g)) +
geom_density(alpha = 0.7) + theme_bw() +
theme(legend.position="right")
g2 <- ggplot(data, aes(x = x.2, fill = g)) +
geom_density(alpha = 0.7) + theme_bw() +
theme(legend.position="none")
g3 <- ggplot(data, aes(x = x.3, fill = g)) +
geom_density(alpha = 0.7) + theme_bw() +
theme(legend.position="none")
g4 <- ggplot(data, aes(x = x.4, fill = g)) +
geom_density(alpha = 0.7) + theme_bw() +
theme(legend.position="none")
g5 <- ggplot(data, aes(x = x.5, fill = g)) +
geom_density(alpha = 0.7) + theme_bw() +
theme(legend.position="none")
g6 <- ggplot(data, aes(x = x.6, fill = g)) +
geom_density(alpha = 0.7) + theme_bw() +
theme(legend.position="none")
g7 <- ggplot(data, aes(x = x.7, fill = g)) +
geom_density(alpha = 0.7) + theme_bw() +
theme(legend.position="none")
g8 <- ggplot(data, aes(x = x.8, fill = g)) +
geom_density(alpha = 0.7) + theme_bw() +
theme(legend.position="none")
g9 <- ggplot(data, aes(x = x.9, fill = g)) +
geom_density(alpha = 0.7) + theme_bw() +
theme(legend.position="none")
g10 <- ggplot(data, aes(x = x.10, fill = g)) +
geom_density(alpha = 0.7) + theme_bw() +
theme(legend.position="none")
#grid.arrange(g1,g2,g3,g4,g5,g6,g7,g8,g9,g10,nrow=5)
grid.arrange(g1,g2,nrow=1); grid.arrange(g3,g4,nrow=1);grid.arrange(g5,g6,nrow=1); grid.arrange(g7,g8,nrow=1); grid.arrange(g9,g10,nrow=1)
library(GGally)
x11(width = 20, height = 15)
#options(repr.plot.width = 24, repr.plot.height = 8)
ggpairs(data, columns = 1:10,
ggplot2::aes(colour=g),
title="Correlation matrix. Phoneme data")
Sys.sleep(10)
data_sc <- data %>%
mutate_if(is.numeric, scale)
data_sc %>%
sample_n(., 20, replace=FALSE) %>%
arrange(g) %>%
kbl(caption = "Fisher's iris data set (sample of 20)") %>%
kable_classic(full_width = F, html_font = "Cambria")
data_sc %>%
summary(.) %>%
kbl(caption = "Basic statistics. Phoneme data set") %>%
kable_classic(full_width = F, html_font = "Cambria")
library(caret)
set.seed(7)
training.samples <- data_sc$g %>% # return the indexes of the rows
createDataPartition(p = 0.8, list = FALSE)
train.data <- data_sc[training.samples, ]
test.data <- data_sc[-training.samples, ]
paste0("Proportion of training is ", round((nrow(train.data)/nrow(data_sc))*100,2),"%")
paste0("Proportion of training is ", round((nrow(test.data)/nrow(data_sc))*100,2),"%")
(model <- lda(g~., data = train.data))
plot(model)
# get the x,y coordinates for the LDA plot
data.lda.values <- predict(model)
# create a dataframe that has all the info we need to draw a graph with the first 2 LDs
plot.data <- data.frame(X=data.lda.values$x[,1],
Y=data.lda.values$x[,2],
Phonemes=train.data$g)
head(plot.data)
## draw a graph using ggplot2
ggplot(data=plot.data, aes(x=X, y=Y)) +
geom_point(aes(color=Phonemes)) +
xlab("LD1") + ylab("LD2") +
theme_bw()
# create a dataframe that has all the info we need to draw a graph with the last 2 LDs
plot.data <- data.frame(X=data.lda.values$x[,3],
Y=data.lda.values$x[,4],
Phonemes=train.data$g)
head(plot.data)
## draw a graph using ggplot2
ggplot(data=plot.data, aes(x=X, y=Y)) +
geom_point(aes(color=Phonemes)) +
xlab("LD3") + ylab("LD4") +
theme_bw()
predictions <- model %>% predict(test.data)
names(predictions)
head(predictions$class, 10)
predictions$posterior[1:6, ] %>%
kbl(caption = "Predicted probabilities of class membership (first 6 rows)") %>%
kable_classic(full_width = F, html_font = "Cambria")
# Linear discriminants of the first 3 test samples
head(predictions$x, 3)
mean(predictions$class==test.data$g)
library(MASS)
#Fit the model
(modelqda <- qda(g ~ ., data = train.data))
predictionsqda <- modelqda %>% predict(test.data)
names(predictionsqda)
head(predictionsqda$class, 10)
predictionsqda$posterior[1:6, ] %>%
kbl(caption = "Predicted probabilities of class membership (first 6 rows)") %>%
kable_classic(full_width = F, html_font = "Cambria")
mean(predictionsqda$class==test.data$g)
library(mda)
#Fit the model
(modelfda <- fda(g ~ ., data = train.data))
predictionsfda <- modelfda %>% predict(test.data, type="class")
head(predictionsfda, 10)
predictionsfda <- modelfda %>% predict(test.data, type="posterior")
predictionsfda[1:6, ] %>%
kbl(caption = "Predicted probabilities of class membership (first 6 rows)") %>%
kable_classic(full_width = F, html_font = "Cambria")
modelfda$confusion
confusion(modelfda,test.data) %>% #Confusion in the test data
kbl(caption = "Confusion matrix in the test data") %>%
kable_classic(full_width = F, html_font = "Cambria")
sum(diag(confusion(modelfda,test.data)))/sum(confusion(modelfda,test.data))
library(klaR)
#Fit the model
(modelrda <- rda(g ~ ., data = train.data))
# Make predictions
predictionsrda <- modelrda %>% predict(test.data)
names(predictionsrda)
head(predictionsrda$class, 10)
predictionsrda$posterior[1:6, ] %>%
kbl(caption = "Predicted probabilities of class membership (first 6 rows)") %>%
kable_classic(full_width = F, html_font = "Cambria")
mean(predictionsrda$class==test.data$g)
library(mda)
#Fit the model
(modelmda <- mda(g ~ ., data = train.data))
predictionsmda <- modelmda %>% predict(test.data, type="class")
head(predictionsmda, 10)
predictionsmda <- modelmda %>% predict(test.data, type="posterior")
predictionsmda[1:6, ] %>%
kbl(caption = "Predicted probabilities of class membership (first 6 rows)") %>%
kable_classic(full_width = F, html_font = "Cambria")
modelmda$confusion
confusion(modelmda,test.data) %>% #Confusion in the test data
kbl(caption = "Confusion matrix in the test data") %>%
kable_classic(full_width = F, html_font = "Cambria")
sum(diag(confusion(modelfda,test.data)))/sum(confusion(modelfda,test.data))
